/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}": types.AuthenticateDocument,
    "query challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    id\n    text\n  }\n}": types.ChallengeDocument,
    "mutation createChangeProfileManagersTypedData($request: ChangeProfileManagersRequest!, $options: TypedDataOptions) {\n  createChangeProfileManagersTypedData(request: $request, options: $options) {\n    id\n    expiresAt\n    typedData {\n      types {\n        ChangeDelegatedExecutorsConfig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        delegatorProfileId\n        delegatedExecutors\n        approvals\n        configNumber\n        switchToGivenConfig\n      }\n    }\n  }\n}": types.CreateChangeProfileManagersTypedDataDocument,
    "mutation createProfileWithHandle($request: CreateProfileWithHandleRequest!) {\n  createProfileWithHandle(request: $request) {\n    ... on RelaySuccess {\n      txHash\n    }\n    ... on CreateProfileWithHandleErrorResult {\n      reason\n    }\n    __typename\n  }\n}": types.CreateProfileWithHandleDocument,
    "mutation PostOnMomoka($request: MomokaPostRequest!) {\n  postOnMomoka(request: $request) {\n    ... on CreateMomokaPublicationResult {\n      id\n      proof\n      momokaId\n    }\n    ... on LensProfileManagerRelayError {\n      reason\n    }\n  }\n}": types.PostOnMomokaDocument,
    "query explorePublications($request: ExplorePublicationRequest!) {\n  explorePublications(request: $request) {\n    items {\n      ... on Post {\n        id\n        createdAt\n        by {\n          ...ProfileFields\n        }\n        metadata {\n          ...AnyPublicationMetadataFields\n        }\n      }\n    }\n    pageInfo {\n      prev\n      next\n    }\n  }\n}": types.ExplorePublicationsDocument,
    "fragment AmountFields on Amount {\n  asset {\n    ...Erc20Fields\n  }\n  value\n}": types.AmountFieldsFragmentDoc,
    "fragment AnyPublicationMetadataFields on PublicationMetadata {\n  ... on LegacyPublicationMetadata {\n    ...LegacyPublicationMetadataFields\n  }\n  ... on ArticleMetadataV3 {\n    ...ArticleMetadataV3Fields\n  }\n  ... on AudioMetadataV3 {\n    ...AudioMetadataV3Fields\n  }\n  ... on CheckingInMetadataV3 {\n    ...CheckingInMetadataV3Fields\n  }\n  ... on EmbedMetadataV3 {\n    ...EmbedMetadataV3Fields\n  }\n  ... on EventMetadataV3 {\n    ...EventMetadataV3Fields\n  }\n  ... on ImageMetadataV3 {\n    ...ImageMetadataV3Fields\n  }\n  ... on LinkMetadataV3 {\n    ...LinkMetadataV3Fields\n  }\n  ... on LiveStreamMetadataV3 {\n    ...LiveStreamMetadataV3Fields\n  }\n  ... on MintMetadataV3 {\n    ...MintMetadataV3Fields\n  }\n  ... on SpaceMetadataV3 {\n    ...SpaceMetadataV3Fields\n  }\n  ... on StoryMetadataV3 {\n    ...StoryMetadataV3Fields\n  }\n  ... on TextOnlyMetadataV3 {\n    ...TextOnlyMetadataV3Fields\n  }\n  ... on ThreeDMetadataV3 {\n    ...ThreeDMetadataV3Fields\n  }\n  ... on TransactionMetadataV3 {\n    ...TransactionMetadataV3Fields\n  }\n  ... on VideoMetadataV3 {\n    ...VideoMetadataV3Fields\n  }\n}": types.AnyPublicationMetadataFieldsFragmentDoc,
    "fragment CommentFields on Comment {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  root {\n    ...PrimaryPublicationFields\n  }\n  commentOn {\n    ...PrimaryPublicationFields\n  }\n  firstComment {\n    ...PrimaryPublicationFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n}": types.CommentFieldsFragmentDoc,
    "fragment Erc20Fields on Asset {\n  ... on Erc20 {\n    name\n    symbol\n    decimals\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n}": types.Erc20FieldsFragmentDoc,
    "fragment FiatAmountFields on FiatAmount {\n  asset {\n    name\n    symbol\n    decimals\n  }\n  value\n}": types.FiatAmountFieldsFragmentDoc,
    "fragment FollowModuleFields on FollowModule {\n  ... on FeeFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n    }\n    recipient\n  }\n  ... on RevertFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on UnknownFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    followModuleReturnData\n  }\n}": types.FollowModuleFieldsFragmentDoc,
    "fragment ImageSetFields on ImageSet {\n  raw {\n    uri\n  }\n  optimized {\n    uri\n  }\n}": types.ImageSetFieldsFragmentDoc,
    "fragment MediaFields on LegacyMediaItem {\n  ... on LegacyAudioItem {\n    cover {\n      ...ImageSetFields\n    }\n    audio {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n  }\n  ... on LegacyImageItem {\n    image {\n      ...ImageSetFields\n    }\n  }\n  ... on LegacyVideoItem {\n    cover {\n      ...ImageSetFields\n    }\n    video {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n  }\n}": types.MediaFieldsFragmentDoc,
    "fragment MirrorFields on Mirror {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  mirrorOn {\n    ...PrimaryPublicationFields\n  }\n}": types.MirrorFieldsFragmentDoc,
    "fragment NetworkAddressFields on NetworkAddress {\n  address\n  chainId\n}": types.NetworkAddressFieldsFragmentDoc,
    "fragment NftFields on Nft {\n  tokenId\n  contentURI\n  contract {\n    address\n    chainId\n  }\n  contractType\n  totalSupply\n  collection {\n    contract {\n      address\n      chainId\n    }\n    name\n    symbol\n    baseUri\n    contractType\n    verified\n  }\n  metadata {\n    description\n    externalURL\n    name\n    image {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n        mimeType\n      }\n    }\n    animationUrl\n    attributes {\n      displayType\n      traitType\n      value\n    }\n  }\n  owner {\n    amount\n    address\n  }\n}": types.NftFieldsFragmentDoc,
    "fragment OpenActionModulesFields on OpenActionModule {\n  ... on SimpleCollectOpenActionSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    optionalAmount: amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    followerOnly\n    recipient\n    referralFee\n    collectNft\n    optionalEndsAt: endsAt\n  }\n  ... on MultirecipientFeeCollectOpenActionSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    collectNft\n    optionalEndsAt: endsAt\n    recipients {\n      recipient\n      split\n    }\n  }\n  ... on LegacyFreeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    collectNft\n    followerOnly\n  }\n  ... on LegacyFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n  }\n  ... on LegacyLimitedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    collectLimit\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n  }\n  ... on LegacyLimitedTimedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    collectLimit\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n    endTimestamp\n  }\n  ... on LegacyRevertCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on LegacyTimedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n    endTimestamp\n  }\n  ... on LegacyMultirecipientFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n    recipients {\n      recipient\n      split\n    }\n  }\n  ... on LegacySimpleCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    optionalAmount: amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    followerOnly\n    recipient\n    referralFee\n    optionalEndsAt: endsAt\n  }\n  ... on LegacyERC4626FeeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    vault {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n  }\n  ... on LegacyAaveFeeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n    recipient\n  }\n  ... on UnknownOpenActionModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    openActionModuleReturnData\n  }\n}": types.OpenActionModulesFieldsFragmentDoc,
    "fragment PostFields on Post {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n}": types.PostFieldsFragmentDoc,
    "fragment PrimaryPublicationFields on PrimaryPublication {\n  ... on Comment {\n    id\n  }\n  ... on Quote {\n    id\n  }\n  ... on Post {\n    id\n  }\n}": types.PrimaryPublicationFieldsFragmentDoc,
    "fragment ProfileFields on Profile {\n  id\n  ownedBy {\n    ...NetworkAddressFields\n  }\n  lensManager\n  sponsor\n  txHash\n  createdAt\n  stats {\n    ...ProfileStatsFields\n  }\n  operations {\n    ...ProfileOperationsFields\n  }\n  interests\n  guardian {\n    protected\n    cooldownEndsOn\n  }\n  invitedBy {\n    id\n  }\n  invitesLeft\n  onchainIdentity {\n    proofOfHumanity\n    ens {\n      name\n    }\n    sybilDotOrg {\n      verified\n      source {\n        twitter {\n          handle\n        }\n      }\n    }\n    worldcoin {\n      isHuman\n    }\n  }\n  followNftAddress {\n    address\n    chainId\n  }\n  metadata {\n    ...ProfileMetadataFields\n  }\n  followModule {\n    ...FollowModuleFields\n  }\n  handle\n}": types.ProfileFieldsFragmentDoc,
    "fragment ProfileMetadataFields on ProfileMetadata {\n  displayName\n  bio\n  rawURI\n  attributes {\n    type\n    key\n    value\n  }\n  picture {\n    ... on ImageSet {\n      ...ImageSetFields\n    }\n    ... on NftImage {\n      image {\n        raw {\n          uri\n        }\n      }\n    }\n  }\n  coverPicture {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n}": types.ProfileMetadataFieldsFragmentDoc,
    "fragment ProfileOperationsFields on ProfileOperations {\n  id\n  isBlockedByMe {\n    value\n  }\n  isFollowedByMe {\n    value\n  }\n  isFollowingMe {\n    value\n  }\n  canBlock\n  canUnblock\n  canFollow\n  canUnfollow\n}": types.ProfileOperationsFieldsFragmentDoc,
    "fragment ProfileStatsFields on ProfileStats {\n  id\n  followers\n  following\n  comments\n  posts\n  mirrors\n  quotes\n  publications\n  reactions\n  reacted\n  countOpenActions\n}": types.ProfileStatsFieldsFragmentDoc,
    "fragment PublicationOperationFields on PublicationOperations {\n  isNotInterested\n  hasBookmarked\n  hasReported\n  canAct\n  hasActed {\n    value\n    isFinalisedOnchain\n  }\n  actedOn {\n    ... on KnownCollectOpenActionResult {\n      type\n    }\n    ... on UnknownOpenActionResult {\n      address\n      category\n      initReturnData\n    }\n  }\n  hasReacted\n  canComment\n  canMirror\n  hasMirrored\n  canDecrypt {\n    result\n    reasons\n    extraDetails\n  }\n}": types.PublicationOperationFieldsFragmentDoc,
    "fragment PublicationStatsFields on PublicationStats {\n  id\n  comments\n  mirrors\n  quotes\n  reactions(request: {type: UPVOTE})\n  countOpenActions\n}": types.PublicationStatsFieldsFragmentDoc,
    "fragment QuoteFields on Quote {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  quoteOn {\n    ...PrimaryPublicationFields\n  }\n}": types.QuoteFieldsFragmentDoc,
    "fragment ReferenceModuleFields on ReferenceModule {\n  ... on FollowOnlyReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on UnknownReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    referenceModuleReturnData\n  }\n  ... on DegreesOfSeparationReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    commentsRestricted\n    mirrorsRestricted\n    quotesRestricted\n    degreesOfSeparation\n  }\n}": types.ReferenceModuleFieldsFragmentDoc,
    "fragment ArticleMetadataV3Fields on ArticleMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  title\n  content\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}": types.ArticleMetadataV3FieldsFragmentDoc,
    "fragment AudioMetadataV3Fields on AudioMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  asset {\n    ...PublicationMetadataMediaAudioFields\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  title\n  content\n}": types.AudioMetadataV3FieldsFragmentDoc,
    "fragment CheckingInMetadataV3Fields on CheckingInMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  location\n  geographic {\n    rawURI\n    latitude\n    longitude\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}": types.CheckingInMetadataV3FieldsFragmentDoc,
    "fragment EmbedMetadataV3Fields on EmbedMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  embed\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}": types.EmbedMetadataV3FieldsFragmentDoc,
    "fragment EventMetadataV3Fields on EventMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  geographic {\n    rawURI\n    latitude\n    longitude\n  }\n  startsAt\n  endsAt\n  links\n  location\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}": types.EventMetadataV3FieldsFragmentDoc,
    "fragment ImageMetadataV3Fields on ImageMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  asset {\n    image {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n    license\n    altTag\n  }\n  title\n  content\n}": types.ImageMetadataV3FieldsFragmentDoc,
    "fragment LegacyPublicationMetadataFields on LegacyPublicationMetadata {\n  content\n  media {\n    ...MediaFields\n  }\n  locale\n  tags\n  contentWarning\n  mainContentFocus\n  appId\n  rawURI\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n}": types.LegacyPublicationMetadataFieldsFragmentDoc,
    "fragment LinkMetadataV3Fields on LinkMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  sharingLink\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}": types.LinkMetadataV3FieldsFragmentDoc,
    "fragment LiveStreamMetadataV3Fields on LiveStreamMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  startsAt\n  endsAt\n  playbackURL\n  liveURL\n  checkLiveAPI\n  title\n  content\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}": types.LiveStreamMetadataV3FieldsFragmentDoc,
    "fragment MarketplaceMetadataFields on MarketplaceMetadata {\n  name\n  description\n  externalURL\n  attributes {\n    displayType\n    traitType\n    value\n  }\n  image {\n    ...ImageSetFields\n  }\n  animationUrl\n}": types.MarketplaceMetadataFieldsFragmentDoc,
    "fragment MintMetadataV3Fields on MintMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  mintLink\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}": types.MintMetadataV3FieldsFragmentDoc,
    "fragment PublicationMetadataMediaAudioFields on PublicationMetadataMediaAudio {\n  artist\n  audio {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  cover {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  duration\n  license\n  genre\n  recordLabel\n  credits\n  lyrics\n}": types.PublicationMetadataMediaAudioFieldsFragmentDoc,
    "fragment PublicationMetadataMediaFields on PublicationMetadataMedia {\n  ... on PublicationMetadataMediaVideo {\n    ...PublicationMetadataMediaVideoFields\n  }\n  ... on PublicationMetadataMediaImage {\n    ...PublicationMetadataMediaImageFields\n  }\n  ... on PublicationMetadataMediaAudio {\n    ...PublicationMetadataMediaAudioFields\n  }\n}": types.PublicationMetadataMediaFieldsFragmentDoc,
    "fragment PublicationMetadataMediaImageFields on PublicationMetadataMediaImage {\n  license\n  image {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  altTag\n}": types.PublicationMetadataMediaImageFieldsFragmentDoc,
    "fragment PublicationMetadataMediaVideoFields on PublicationMetadataMediaVideo {\n  video {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  cover {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  duration\n  license\n  altTag\n}": types.PublicationMetadataMediaVideoFieldsFragmentDoc,
    "fragment PublicationMetadataV3AttributeFields on PublicationMetadataV3Attribute {\n  key\n  value\n}": types.PublicationMetadataV3AttributeFieldsFragmentDoc,
    "fragment SpaceMetadataV3Fields on SpaceMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  title\n  link\n  startsAt\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}": types.SpaceMetadataV3FieldsFragmentDoc,
    "fragment StoryMetadataV3Fields on StoryMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  asset {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}": types.StoryMetadataV3FieldsFragmentDoc,
    "fragment TextOnlyMetadataV3Fields on TextOnlyMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  content\n}": types.TextOnlyMetadataV3FieldsFragmentDoc,
    "fragment ThreeDMetadataV3Fields on ThreeDMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  assets {\n    license\n    uri\n    zipPath\n    playerURL\n    format\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}": types.ThreeDMetadataV3FieldsFragmentDoc,
    "fragment TransactionMetadataV3Fields on TransactionMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  type\n  txHash\n  chainId\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}": types.TransactionMetadataV3FieldsFragmentDoc,
    "fragment VideoMetadataV3Fields on VideoMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  content\n  tags\n  locale\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}": types.VideoMetadataV3FieldsFragmentDoc,
    "query profiles($request: ProfilesRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      next\n    }\n  }\n}": types.ProfilesDocument,
    "query publications($request: PublicationsRequest!) {\n  result: publications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Quote {\n        ...QuoteFields\n      }\n    }\n    pageInfo {\n      prev\n      next\n    }\n  }\n}": types.PublicationsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}"): (typeof documents)["mutation authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    id\n    text\n  }\n}"): (typeof documents)["query challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    id\n    text\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createChangeProfileManagersTypedData($request: ChangeProfileManagersRequest!, $options: TypedDataOptions) {\n  createChangeProfileManagersTypedData(request: $request, options: $options) {\n    id\n    expiresAt\n    typedData {\n      types {\n        ChangeDelegatedExecutorsConfig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        delegatorProfileId\n        delegatedExecutors\n        approvals\n        configNumber\n        switchToGivenConfig\n      }\n    }\n  }\n}"): (typeof documents)["mutation createChangeProfileManagersTypedData($request: ChangeProfileManagersRequest!, $options: TypedDataOptions) {\n  createChangeProfileManagersTypedData(request: $request, options: $options) {\n    id\n    expiresAt\n    typedData {\n      types {\n        ChangeDelegatedExecutorsConfig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        delegatorProfileId\n        delegatedExecutors\n        approvals\n        configNumber\n        switchToGivenConfig\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createProfileWithHandle($request: CreateProfileWithHandleRequest!) {\n  createProfileWithHandle(request: $request) {\n    ... on RelaySuccess {\n      txHash\n    }\n    ... on CreateProfileWithHandleErrorResult {\n      reason\n    }\n    __typename\n  }\n}"): (typeof documents)["mutation createProfileWithHandle($request: CreateProfileWithHandleRequest!) {\n  createProfileWithHandle(request: $request) {\n    ... on RelaySuccess {\n      txHash\n    }\n    ... on CreateProfileWithHandleErrorResult {\n      reason\n    }\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation PostOnMomoka($request: MomokaPostRequest!) {\n  postOnMomoka(request: $request) {\n    ... on CreateMomokaPublicationResult {\n      id\n      proof\n      momokaId\n    }\n    ... on LensProfileManagerRelayError {\n      reason\n    }\n  }\n}"): (typeof documents)["mutation PostOnMomoka($request: MomokaPostRequest!) {\n  postOnMomoka(request: $request) {\n    ... on CreateMomokaPublicationResult {\n      id\n      proof\n      momokaId\n    }\n    ... on LensProfileManagerRelayError {\n      reason\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query explorePublications($request: ExplorePublicationRequest!) {\n  explorePublications(request: $request) {\n    items {\n      ... on Post {\n        id\n        createdAt\n        by {\n          ...ProfileFields\n        }\n        metadata {\n          ...AnyPublicationMetadataFields\n        }\n      }\n    }\n    pageInfo {\n      prev\n      next\n    }\n  }\n}"): (typeof documents)["query explorePublications($request: ExplorePublicationRequest!) {\n  explorePublications(request: $request) {\n    items {\n      ... on Post {\n        id\n        createdAt\n        by {\n          ...ProfileFields\n        }\n        metadata {\n          ...AnyPublicationMetadataFields\n        }\n      }\n    }\n    pageInfo {\n      prev\n      next\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AmountFields on Amount {\n  asset {\n    ...Erc20Fields\n  }\n  value\n}"): (typeof documents)["fragment AmountFields on Amount {\n  asset {\n    ...Erc20Fields\n  }\n  value\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AnyPublicationMetadataFields on PublicationMetadata {\n  ... on LegacyPublicationMetadata {\n    ...LegacyPublicationMetadataFields\n  }\n  ... on ArticleMetadataV3 {\n    ...ArticleMetadataV3Fields\n  }\n  ... on AudioMetadataV3 {\n    ...AudioMetadataV3Fields\n  }\n  ... on CheckingInMetadataV3 {\n    ...CheckingInMetadataV3Fields\n  }\n  ... on EmbedMetadataV3 {\n    ...EmbedMetadataV3Fields\n  }\n  ... on EventMetadataV3 {\n    ...EventMetadataV3Fields\n  }\n  ... on ImageMetadataV3 {\n    ...ImageMetadataV3Fields\n  }\n  ... on LinkMetadataV3 {\n    ...LinkMetadataV3Fields\n  }\n  ... on LiveStreamMetadataV3 {\n    ...LiveStreamMetadataV3Fields\n  }\n  ... on MintMetadataV3 {\n    ...MintMetadataV3Fields\n  }\n  ... on SpaceMetadataV3 {\n    ...SpaceMetadataV3Fields\n  }\n  ... on StoryMetadataV3 {\n    ...StoryMetadataV3Fields\n  }\n  ... on TextOnlyMetadataV3 {\n    ...TextOnlyMetadataV3Fields\n  }\n  ... on ThreeDMetadataV3 {\n    ...ThreeDMetadataV3Fields\n  }\n  ... on TransactionMetadataV3 {\n    ...TransactionMetadataV3Fields\n  }\n  ... on VideoMetadataV3 {\n    ...VideoMetadataV3Fields\n  }\n}"): (typeof documents)["fragment AnyPublicationMetadataFields on PublicationMetadata {\n  ... on LegacyPublicationMetadata {\n    ...LegacyPublicationMetadataFields\n  }\n  ... on ArticleMetadataV3 {\n    ...ArticleMetadataV3Fields\n  }\n  ... on AudioMetadataV3 {\n    ...AudioMetadataV3Fields\n  }\n  ... on CheckingInMetadataV3 {\n    ...CheckingInMetadataV3Fields\n  }\n  ... on EmbedMetadataV3 {\n    ...EmbedMetadataV3Fields\n  }\n  ... on EventMetadataV3 {\n    ...EventMetadataV3Fields\n  }\n  ... on ImageMetadataV3 {\n    ...ImageMetadataV3Fields\n  }\n  ... on LinkMetadataV3 {\n    ...LinkMetadataV3Fields\n  }\n  ... on LiveStreamMetadataV3 {\n    ...LiveStreamMetadataV3Fields\n  }\n  ... on MintMetadataV3 {\n    ...MintMetadataV3Fields\n  }\n  ... on SpaceMetadataV3 {\n    ...SpaceMetadataV3Fields\n  }\n  ... on StoryMetadataV3 {\n    ...StoryMetadataV3Fields\n  }\n  ... on TextOnlyMetadataV3 {\n    ...TextOnlyMetadataV3Fields\n  }\n  ... on ThreeDMetadataV3 {\n    ...ThreeDMetadataV3Fields\n  }\n  ... on TransactionMetadataV3 {\n    ...TransactionMetadataV3Fields\n  }\n  ... on VideoMetadataV3 {\n    ...VideoMetadataV3Fields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CommentFields on Comment {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  root {\n    ...PrimaryPublicationFields\n  }\n  commentOn {\n    ...PrimaryPublicationFields\n  }\n  firstComment {\n    ...PrimaryPublicationFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n}"): (typeof documents)["fragment CommentFields on Comment {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  root {\n    ...PrimaryPublicationFields\n  }\n  commentOn {\n    ...PrimaryPublicationFields\n  }\n  firstComment {\n    ...PrimaryPublicationFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Erc20Fields on Asset {\n  ... on Erc20 {\n    name\n    symbol\n    decimals\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n}"): (typeof documents)["fragment Erc20Fields on Asset {\n  ... on Erc20 {\n    name\n    symbol\n    decimals\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FiatAmountFields on FiatAmount {\n  asset {\n    name\n    symbol\n    decimals\n  }\n  value\n}"): (typeof documents)["fragment FiatAmountFields on FiatAmount {\n  asset {\n    name\n    symbol\n    decimals\n  }\n  value\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FollowModuleFields on FollowModule {\n  ... on FeeFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n    }\n    recipient\n  }\n  ... on RevertFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on UnknownFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    followModuleReturnData\n  }\n}"): (typeof documents)["fragment FollowModuleFields on FollowModule {\n  ... on FeeFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n    }\n    recipient\n  }\n  ... on RevertFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on UnknownFollowModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    followModuleReturnData\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ImageSetFields on ImageSet {\n  raw {\n    uri\n  }\n  optimized {\n    uri\n  }\n}"): (typeof documents)["fragment ImageSetFields on ImageSet {\n  raw {\n    uri\n  }\n  optimized {\n    uri\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MediaFields on LegacyMediaItem {\n  ... on LegacyAudioItem {\n    cover {\n      ...ImageSetFields\n    }\n    audio {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n  }\n  ... on LegacyImageItem {\n    image {\n      ...ImageSetFields\n    }\n  }\n  ... on LegacyVideoItem {\n    cover {\n      ...ImageSetFields\n    }\n    video {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n  }\n}"): (typeof documents)["fragment MediaFields on LegacyMediaItem {\n  ... on LegacyAudioItem {\n    cover {\n      ...ImageSetFields\n    }\n    audio {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n  }\n  ... on LegacyImageItem {\n    image {\n      ...ImageSetFields\n    }\n  }\n  ... on LegacyVideoItem {\n    cover {\n      ...ImageSetFields\n    }\n    video {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MirrorFields on Mirror {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  mirrorOn {\n    ...PrimaryPublicationFields\n  }\n}"): (typeof documents)["fragment MirrorFields on Mirror {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  mirrorOn {\n    ...PrimaryPublicationFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment NetworkAddressFields on NetworkAddress {\n  address\n  chainId\n}"): (typeof documents)["fragment NetworkAddressFields on NetworkAddress {\n  address\n  chainId\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment NftFields on Nft {\n  tokenId\n  contentURI\n  contract {\n    address\n    chainId\n  }\n  contractType\n  totalSupply\n  collection {\n    contract {\n      address\n      chainId\n    }\n    name\n    symbol\n    baseUri\n    contractType\n    verified\n  }\n  metadata {\n    description\n    externalURL\n    name\n    image {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n        mimeType\n      }\n    }\n    animationUrl\n    attributes {\n      displayType\n      traitType\n      value\n    }\n  }\n  owner {\n    amount\n    address\n  }\n}"): (typeof documents)["fragment NftFields on Nft {\n  tokenId\n  contentURI\n  contract {\n    address\n    chainId\n  }\n  contractType\n  totalSupply\n  collection {\n    contract {\n      address\n      chainId\n    }\n    name\n    symbol\n    baseUri\n    contractType\n    verified\n  }\n  metadata {\n    description\n    externalURL\n    name\n    image {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n        mimeType\n      }\n    }\n    animationUrl\n    attributes {\n      displayType\n      traitType\n      value\n    }\n  }\n  owner {\n    amount\n    address\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment OpenActionModulesFields on OpenActionModule {\n  ... on SimpleCollectOpenActionSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    optionalAmount: amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    followerOnly\n    recipient\n    referralFee\n    collectNft\n    optionalEndsAt: endsAt\n  }\n  ... on MultirecipientFeeCollectOpenActionSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    collectNft\n    optionalEndsAt: endsAt\n    recipients {\n      recipient\n      split\n    }\n  }\n  ... on LegacyFreeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    collectNft\n    followerOnly\n  }\n  ... on LegacyFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n  }\n  ... on LegacyLimitedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    collectLimit\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n  }\n  ... on LegacyLimitedTimedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    collectLimit\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n    endTimestamp\n  }\n  ... on LegacyRevertCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on LegacyTimedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n    endTimestamp\n  }\n  ... on LegacyMultirecipientFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n    recipients {\n      recipient\n      split\n    }\n  }\n  ... on LegacySimpleCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    optionalAmount: amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    followerOnly\n    recipient\n    referralFee\n    optionalEndsAt: endsAt\n  }\n  ... on LegacyERC4626FeeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    vault {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n  }\n  ... on LegacyAaveFeeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n    recipient\n  }\n  ... on UnknownOpenActionModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    openActionModuleReturnData\n  }\n}"): (typeof documents)["fragment OpenActionModulesFields on OpenActionModule {\n  ... on SimpleCollectOpenActionSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    optionalAmount: amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    followerOnly\n    recipient\n    referralFee\n    collectNft\n    optionalEndsAt: endsAt\n  }\n  ... on MultirecipientFeeCollectOpenActionSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    collectNft\n    optionalEndsAt: endsAt\n    recipients {\n      recipient\n      split\n    }\n  }\n  ... on LegacyFreeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    collectNft\n    followerOnly\n  }\n  ... on LegacyFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n  }\n  ... on LegacyLimitedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    collectLimit\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n  }\n  ... on LegacyLimitedTimedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    collectLimit\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n    endTimestamp\n  }\n  ... on LegacyRevertCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on LegacyTimedFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    referralFee\n    followerOnly\n    endTimestamp\n  }\n  ... on LegacyMultirecipientFeeCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n    recipients {\n      recipient\n      split\n    }\n  }\n  ... on LegacySimpleCollectModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    optionalAmount: amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    followerOnly\n    recipient\n    referralFee\n    optionalEndsAt: endsAt\n  }\n  ... on LegacyERC4626FeeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    vault {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    recipient\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n  }\n  ... on LegacyAaveFeeCollectModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    amount {\n      ...AmountFields\n      rate(request: {for: USD}) {\n        ...FiatAmountFields\n      }\n    }\n    optionalCollectLimit: collectLimit\n    referralFee\n    followerOnly\n    optionalEndsAt: endsAt\n    recipient\n  }\n  ... on UnknownOpenActionModuleSettings {\n    collectNft\n    contract {\n      ...NetworkAddressFields\n    }\n    openActionModuleReturnData\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PostFields on Post {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n}"): (typeof documents)["fragment PostFields on Post {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PrimaryPublicationFields on PrimaryPublication {\n  ... on Comment {\n    id\n  }\n  ... on Quote {\n    id\n  }\n  ... on Post {\n    id\n  }\n}"): (typeof documents)["fragment PrimaryPublicationFields on PrimaryPublication {\n  ... on Comment {\n    id\n  }\n  ... on Quote {\n    id\n  }\n  ... on Post {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProfileFields on Profile {\n  id\n  ownedBy {\n    ...NetworkAddressFields\n  }\n  lensManager\n  sponsor\n  txHash\n  createdAt\n  stats {\n    ...ProfileStatsFields\n  }\n  operations {\n    ...ProfileOperationsFields\n  }\n  interests\n  guardian {\n    protected\n    cooldownEndsOn\n  }\n  invitedBy {\n    id\n  }\n  invitesLeft\n  onchainIdentity {\n    proofOfHumanity\n    ens {\n      name\n    }\n    sybilDotOrg {\n      verified\n      source {\n        twitter {\n          handle\n        }\n      }\n    }\n    worldcoin {\n      isHuman\n    }\n  }\n  followNftAddress {\n    address\n    chainId\n  }\n  metadata {\n    ...ProfileMetadataFields\n  }\n  followModule {\n    ...FollowModuleFields\n  }\n  handle\n}"): (typeof documents)["fragment ProfileFields on Profile {\n  id\n  ownedBy {\n    ...NetworkAddressFields\n  }\n  lensManager\n  sponsor\n  txHash\n  createdAt\n  stats {\n    ...ProfileStatsFields\n  }\n  operations {\n    ...ProfileOperationsFields\n  }\n  interests\n  guardian {\n    protected\n    cooldownEndsOn\n  }\n  invitedBy {\n    id\n  }\n  invitesLeft\n  onchainIdentity {\n    proofOfHumanity\n    ens {\n      name\n    }\n    sybilDotOrg {\n      verified\n      source {\n        twitter {\n          handle\n        }\n      }\n    }\n    worldcoin {\n      isHuman\n    }\n  }\n  followNftAddress {\n    address\n    chainId\n  }\n  metadata {\n    ...ProfileMetadataFields\n  }\n  followModule {\n    ...FollowModuleFields\n  }\n  handle\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProfileMetadataFields on ProfileMetadata {\n  displayName\n  bio\n  rawURI\n  attributes {\n    type\n    key\n    value\n  }\n  picture {\n    ... on ImageSet {\n      ...ImageSetFields\n    }\n    ... on NftImage {\n      image {\n        raw {\n          uri\n        }\n      }\n    }\n  }\n  coverPicture {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n}"): (typeof documents)["fragment ProfileMetadataFields on ProfileMetadata {\n  displayName\n  bio\n  rawURI\n  attributes {\n    type\n    key\n    value\n  }\n  picture {\n    ... on ImageSet {\n      ...ImageSetFields\n    }\n    ... on NftImage {\n      image {\n        raw {\n          uri\n        }\n      }\n    }\n  }\n  coverPicture {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProfileOperationsFields on ProfileOperations {\n  id\n  isBlockedByMe {\n    value\n  }\n  isFollowedByMe {\n    value\n  }\n  isFollowingMe {\n    value\n  }\n  canBlock\n  canUnblock\n  canFollow\n  canUnfollow\n}"): (typeof documents)["fragment ProfileOperationsFields on ProfileOperations {\n  id\n  isBlockedByMe {\n    value\n  }\n  isFollowedByMe {\n    value\n  }\n  isFollowingMe {\n    value\n  }\n  canBlock\n  canUnblock\n  canFollow\n  canUnfollow\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProfileStatsFields on ProfileStats {\n  id\n  followers\n  following\n  comments\n  posts\n  mirrors\n  quotes\n  publications\n  reactions\n  reacted\n  countOpenActions\n}"): (typeof documents)["fragment ProfileStatsFields on ProfileStats {\n  id\n  followers\n  following\n  comments\n  posts\n  mirrors\n  quotes\n  publications\n  reactions\n  reacted\n  countOpenActions\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PublicationOperationFields on PublicationOperations {\n  isNotInterested\n  hasBookmarked\n  hasReported\n  canAct\n  hasActed {\n    value\n    isFinalisedOnchain\n  }\n  actedOn {\n    ... on KnownCollectOpenActionResult {\n      type\n    }\n    ... on UnknownOpenActionResult {\n      address\n      category\n      initReturnData\n    }\n  }\n  hasReacted\n  canComment\n  canMirror\n  hasMirrored\n  canDecrypt {\n    result\n    reasons\n    extraDetails\n  }\n}"): (typeof documents)["fragment PublicationOperationFields on PublicationOperations {\n  isNotInterested\n  hasBookmarked\n  hasReported\n  canAct\n  hasActed {\n    value\n    isFinalisedOnchain\n  }\n  actedOn {\n    ... on KnownCollectOpenActionResult {\n      type\n    }\n    ... on UnknownOpenActionResult {\n      address\n      category\n      initReturnData\n    }\n  }\n  hasReacted\n  canComment\n  canMirror\n  hasMirrored\n  canDecrypt {\n    result\n    reasons\n    extraDetails\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PublicationStatsFields on PublicationStats {\n  id\n  comments\n  mirrors\n  quotes\n  reactions(request: {type: UPVOTE})\n  countOpenActions\n}"): (typeof documents)["fragment PublicationStatsFields on PublicationStats {\n  id\n  comments\n  mirrors\n  quotes\n  reactions(request: {type: UPVOTE})\n  countOpenActions\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment QuoteFields on Quote {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  quoteOn {\n    ...PrimaryPublicationFields\n  }\n}"): (typeof documents)["fragment QuoteFields on Quote {\n  id\n  publishedOn {\n    id\n  }\n  isHidden\n  momoka {\n    proof\n  }\n  txHash\n  createdAt\n  by {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  operations {\n    ...PublicationOperationFields\n  }\n  metadata {\n    ...AnyPublicationMetadataFields\n  }\n  openActionModules {\n    ...OpenActionModulesFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  quoteOn {\n    ...PrimaryPublicationFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ReferenceModuleFields on ReferenceModule {\n  ... on FollowOnlyReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on UnknownReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    referenceModuleReturnData\n  }\n  ... on DegreesOfSeparationReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    commentsRestricted\n    mirrorsRestricted\n    quotesRestricted\n    degreesOfSeparation\n  }\n}"): (typeof documents)["fragment ReferenceModuleFields on ReferenceModule {\n  ... on FollowOnlyReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n  }\n  ... on UnknownReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    referenceModuleReturnData\n  }\n  ... on DegreesOfSeparationReferenceModuleSettings {\n    contract {\n      ...NetworkAddressFields\n    }\n    commentsRestricted\n    mirrorsRestricted\n    quotesRestricted\n    degreesOfSeparation\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ArticleMetadataV3Fields on ArticleMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  title\n  content\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}"): (typeof documents)["fragment ArticleMetadataV3Fields on ArticleMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  title\n  content\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AudioMetadataV3Fields on AudioMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  asset {\n    ...PublicationMetadataMediaAudioFields\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  title\n  content\n}"): (typeof documents)["fragment AudioMetadataV3Fields on AudioMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  asset {\n    ...PublicationMetadataMediaAudioFields\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  title\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CheckingInMetadataV3Fields on CheckingInMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  location\n  geographic {\n    rawURI\n    latitude\n    longitude\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"): (typeof documents)["fragment CheckingInMetadataV3Fields on CheckingInMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  location\n  geographic {\n    rawURI\n    latitude\n    longitude\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment EmbedMetadataV3Fields on EmbedMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  embed\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"): (typeof documents)["fragment EmbedMetadataV3Fields on EmbedMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  embed\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment EventMetadataV3Fields on EventMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  geographic {\n    rawURI\n    latitude\n    longitude\n  }\n  startsAt\n  endsAt\n  links\n  location\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}"): (typeof documents)["fragment EventMetadataV3Fields on EventMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  geographic {\n    rawURI\n    latitude\n    longitude\n  }\n  startsAt\n  endsAt\n  links\n  location\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ImageMetadataV3Fields on ImageMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  asset {\n    image {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n    license\n    altTag\n  }\n  title\n  content\n}"): (typeof documents)["fragment ImageMetadataV3Fields on ImageMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  asset {\n    image {\n      raw {\n        uri\n      }\n      optimized {\n        uri\n      }\n    }\n    license\n    altTag\n  }\n  title\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LegacyPublicationMetadataFields on LegacyPublicationMetadata {\n  content\n  media {\n    ...MediaFields\n  }\n  locale\n  tags\n  contentWarning\n  mainContentFocus\n  appId\n  rawURI\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n}"): (typeof documents)["fragment LegacyPublicationMetadataFields on LegacyPublicationMetadata {\n  content\n  media {\n    ...MediaFields\n  }\n  locale\n  tags\n  contentWarning\n  mainContentFocus\n  appId\n  rawURI\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LinkMetadataV3Fields on LinkMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  sharingLink\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"): (typeof documents)["fragment LinkMetadataV3Fields on LinkMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  sharingLink\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LiveStreamMetadataV3Fields on LiveStreamMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  startsAt\n  endsAt\n  playbackURL\n  liveURL\n  checkLiveAPI\n  title\n  content\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}"): (typeof documents)["fragment LiveStreamMetadataV3Fields on LiveStreamMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  startsAt\n  endsAt\n  playbackURL\n  liveURL\n  checkLiveAPI\n  title\n  content\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MarketplaceMetadataFields on MarketplaceMetadata {\n  name\n  description\n  externalURL\n  attributes {\n    displayType\n    traitType\n    value\n  }\n  image {\n    ...ImageSetFields\n  }\n  animationUrl\n}"): (typeof documents)["fragment MarketplaceMetadataFields on MarketplaceMetadata {\n  name\n  description\n  externalURL\n  attributes {\n    displayType\n    traitType\n    value\n  }\n  image {\n    ...ImageSetFields\n  }\n  animationUrl\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MintMetadataV3Fields on MintMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  mintLink\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"): (typeof documents)["fragment MintMetadataV3Fields on MintMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  mintLink\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PublicationMetadataMediaAudioFields on PublicationMetadataMediaAudio {\n  artist\n  audio {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  cover {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  duration\n  license\n  genre\n  recordLabel\n  credits\n  lyrics\n}"): (typeof documents)["fragment PublicationMetadataMediaAudioFields on PublicationMetadataMediaAudio {\n  artist\n  audio {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  cover {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  duration\n  license\n  genre\n  recordLabel\n  credits\n  lyrics\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PublicationMetadataMediaFields on PublicationMetadataMedia {\n  ... on PublicationMetadataMediaVideo {\n    ...PublicationMetadataMediaVideoFields\n  }\n  ... on PublicationMetadataMediaImage {\n    ...PublicationMetadataMediaImageFields\n  }\n  ... on PublicationMetadataMediaAudio {\n    ...PublicationMetadataMediaAudioFields\n  }\n}"): (typeof documents)["fragment PublicationMetadataMediaFields on PublicationMetadataMedia {\n  ... on PublicationMetadataMediaVideo {\n    ...PublicationMetadataMediaVideoFields\n  }\n  ... on PublicationMetadataMediaImage {\n    ...PublicationMetadataMediaImageFields\n  }\n  ... on PublicationMetadataMediaAudio {\n    ...PublicationMetadataMediaAudioFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PublicationMetadataMediaImageFields on PublicationMetadataMediaImage {\n  license\n  image {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  altTag\n}"): (typeof documents)["fragment PublicationMetadataMediaImageFields on PublicationMetadataMediaImage {\n  license\n  image {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  altTag\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PublicationMetadataMediaVideoFields on PublicationMetadataMediaVideo {\n  video {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  cover {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  duration\n  license\n  altTag\n}"): (typeof documents)["fragment PublicationMetadataMediaVideoFields on PublicationMetadataMediaVideo {\n  video {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  cover {\n    raw {\n      uri\n    }\n    optimized {\n      uri\n    }\n  }\n  duration\n  license\n  altTag\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PublicationMetadataV3AttributeFields on PublicationMetadataV3Attribute {\n  key\n  value\n}"): (typeof documents)["fragment PublicationMetadataV3AttributeFields on PublicationMetadataV3Attribute {\n  key\n  value\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment SpaceMetadataV3Fields on SpaceMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  title\n  link\n  startsAt\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"): (typeof documents)["fragment SpaceMetadataV3Fields on SpaceMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  title\n  link\n  startsAt\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment StoryMetadataV3Fields on StoryMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  asset {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"): (typeof documents)["fragment StoryMetadataV3Fields on StoryMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  asset {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment TextOnlyMetadataV3Fields on TextOnlyMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  content\n}"): (typeof documents)["fragment TextOnlyMetadataV3Fields on TextOnlyMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ThreeDMetadataV3Fields on ThreeDMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  assets {\n    license\n    uri\n    zipPath\n    playerURL\n    format\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"): (typeof documents)["fragment ThreeDMetadataV3Fields on ThreeDMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  assets {\n    license\n    uri\n    zipPath\n    playerURL\n    format\n  }\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment TransactionMetadataV3Fields on TransactionMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  type\n  txHash\n  chainId\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"): (typeof documents)["fragment TransactionMetadataV3Fields on TransactionMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  type\n  txHash\n  chainId\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n  content\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment VideoMetadataV3Fields on VideoMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  content\n  tags\n  locale\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}"): (typeof documents)["fragment VideoMetadataV3Fields on VideoMetadataV3 {\n  id\n  rawURI\n  locale\n  tags\n  contentWarning\n  hideFromFeed\n  appId\n  marketplace {\n    ...MarketplaceMetadataFields\n  }\n  attributes {\n    ...PublicationMetadataV3AttributeFields\n  }\n  content\n  tags\n  locale\n  attachments {\n    ...PublicationMetadataMediaFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query profiles($request: ProfilesRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      next\n    }\n  }\n}"): (typeof documents)["query profiles($request: ProfilesRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      next\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query publications($request: PublicationsRequest!) {\n  result: publications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Quote {\n        ...QuoteFields\n      }\n    }\n    pageInfo {\n      prev\n      next\n    }\n  }\n}"): (typeof documents)["query publications($request: PublicationsRequest!) {\n  result: publications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Quote {\n        ...QuoteFields\n      }\n    }\n    pageInfo {\n      prev\n      next\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;